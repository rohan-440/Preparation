Finding all sub-palindromes in â€ŠO(n)



Longest Palindromic Substring Manacher's Algorithm

// brute force

int longestPalindromeSubstringEasy(string s) {

        int longest_substring = 1;
        for (int i = 0; i < arr.length; i++) {

            int x, y;
            int palindrome;
            x = i;
            y = i + 1;
            palindrome = 0;
            while (x >= 0 && y < arr.length && arr[x] == arr[y]) {
                x--;
                y++;
                palindrome += 2;
            }
            longest_substring = Math.max(longest_substring, palindrome);
            
            x = i - 1;
            y = i + 1;
            palindrome = 1;
            while (x >= 0 && y < arr.length && arr[x] == arr[y]) {
                x--;
                y++;
                palindrome += 2;
            }
            longest_substring = Math.max(longest_substring, palindrome);
        }
        return longest_substring;
    }


//Manacher's Algorithm


vector<int> manacher(string s) {
  string t = "#";
  for (auto c : s) {
    t += c;
    t += '#';
  }
  int n = t.size();
  vector<int> r(n);
  for (int i = 0, j = 0; i < n; i++) {
      if (2 * j - i >= 0 && j + r[j] > i){
              r[i] = min(r[2 * j - i], j + r[j] - i);
          }
    while (i - r[i] >= 0 && i + r[i] < n && t[i - r[i]] == t[i + r[i]]){
      r[i] += 1;
       }
    if (i + r[i] > j + r[j]){
        j = i;
      }
    r[i]--;
  }
  return vector<int>(begin(r) + 1, end(r) - 1);
}  
